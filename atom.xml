<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CRJ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sssmeb.github.io/"/>
  <updated>2019-07-08T05:16:45.777Z</updated>
  <id>https://sssmeb.github.io/</id>
  
  <author>
    <name>CAO RUNJIA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ping</title>
    <link href="https://sssmeb.github.io/2019/07/08/ping/"/>
    <id>https://sssmeb.github.io/2019/07/08/ping/</id>
    <published>2019-07-08T05:15:40.000Z</published>
    <updated>2019-07-08T05:16:45.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>ping属于一个通信协议，是TCP/IP协议的一部分。利用“ping”命令可以检查网络是否连通，可以很好地分析和判定网络故障。</p><p>PING ，用于测试网络连接量的程序。Ping发送一个ICMP（Internet Control Messages Protocol）即因特网信报控制协议；回声请求消息给目的地并报告是否收到所希望的ICMPecho （ICMP回声应答）。它是用来检查网络是否通畅或者网络连接速度的命令。</p><p>它所利用的原理是这样的：利用网络上机器IP地址的唯一性，给目标IP地址发送一个数据包，再要求对方返回一个同样大小的数据包来确定两台网络机器是否连接相通，时延是多少。</p><p>ping指的是端对端连通，通常用来作为可用性的检查，但是某些病毒木马会强行大量远程执行ping命令抢占你的网络资源，导致系统变慢，网速变慢。严禁ping入侵作为大多数防火墙的一个基本功能提供给用户进行选择。通常的情况下你如果不用作服务器或者进行网络测试，可以放心的选中它，保护你的电脑。</p><h3 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h3><ol><li><p>执行 ping 192.168.0.5</p><p>Ping命令会构建一个固定格式的ICMP请求数据包，<br>然后由ICMP协议将这个数据包连同地址“192.168.0.5”一起交给IP层协议</p></li></ol><ol><li><p>本机IP层相关操作</p><p>IP层协议将以地址“192.168.0.5”作为目的地址，本机IP地址作为源地址，<br>加上一些其他的控制信息，构建一个IP数据包发往192.168.0.5。</p></li><li><p>目的主机相关操作</p><p>接收后检查该数据帧，将IP数据包从帧中提取出来，交给本机的IP层协议。<br>IP层检查后，将有用的信息提取后交给ICMP协议<br>ICMP协议后者处理后，马上构建一个ICMP应答包，发送给主机A</p></li></ol><hr><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><p>pin是属于osi七层模型中的应用层。</p><p>ping命令使用的tcp报文还是udp报文呢？</p><p>ping命令使用的是ICMP报文，ICMP报文封装在ip包里。ICMP协议也是tcp/ip协议族中的一个子协议，所以从这一层面来看，icmp报文和tcp报文，udp报文是同一个级别。</p><p>所以ping命令使用的报文既不是tcp报文也不是udp报文。</p><p>但是ICMP 跟TCP和UDP没有归属关系，ICMP位于传输层之下，属网络层。用的IP报头。</p><ul><li>TCP/UDP 在第四层：传输层</li><li>IP/ICMP 在第三层：网络层</li></ul><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3857278002,4035339109&fm=15&gp=0.jpg" alt="image"></p><h6 id="补充IGMP"><a href="#补充IGMP" class="headerlink" title="补充IGMP"></a>补充IGMP</h6><p>IGMP即Internet工作组管理协议（Internet Group Management Protocol）,IGMP主要用来解决网络上广播时占用带宽的问题。</p><p>当网络上的信息要传输给所有工作站时，就发出广播（broadcast）信息（即IP地址主机标识位全为1），交换机会将广播信息不经过滤地发给所有工作站；</p><p>但当这些信息只需传输给某一部分工作站时，通常采用组播（multicast，也称多点广播）的方式，这就要求交换机支持IGMP。支持IGMP的交换机会识别组播信息并将其转发至相应的组，从而使不需要这些信息的工作站的网络带宽不被浪费。IGMP对于提高多媒体传输时的网络性能尤为重要。</p><h4 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h4><p><img src="https://img-blog.csdn.net/20180531094213365?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poajA4Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="image"></p><h4 id="一、ICMP报文类型"><a href="#一、ICMP报文类型" class="headerlink" title="一、ICMP报文类型"></a>一、ICMP报文类型</h4><table><thead><tr><th>种类</th><th>类型值</th><th>ICMP报文的类型</th></tr></thead><tbody><tr><td>差错报告</td><td>3</td><td>终点不可达</td></tr><tr><td>差错报告</td><td>11</td><td>时间超过</td></tr><tr><td>差错报告</td><td>12</td><td>参数问题</td></tr><tr><td>差错报告</td><td>5</td><td>改变路由</td></tr><tr><td>询问报告</td><td>8/0</td><td>回送请求/回答</td></tr><tr><td>询问报告</td><td>13/14</td><td>时间戳请求/回答</td></tr></tbody></table><h4 id="二、-Checksum-检验和"><a href="#二、-Checksum-检验和" class="headerlink" title="二、 Checksum 检验和"></a>二、 Checksum 检验和</h4><p>校验和基本上是一个从数据包计算出来的值来检查其完整性。通过完整性，我们可以检查收到的数据是否没有错误。</p><p>这是因为在网络上传输时，数据包可能会损坏，并且接收端必须知道数据是否已损坏。这是校验和字段添加到报文的原因。在源端，计算校验和并将其作为字段设置在报文中。在目标端，再次计算校验和，并用报文中现有的校验和值进行交叉检查，看看数据包是否正常。</p><h5 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h5><p>IP检验和，其计算与icmp差不多，但与ip计算不同的是，icmp需要通过其报文信息与本身数据一起校验（IP只需校验头部信息）【因为通常在IP报头之后的数据（如ICMP，TCP等）具有自己的校验和。】。</p><p>因此，就算法而言，imcp校验和是：imcp报文中所有16位字的补码总和的16位补码。</p><ol><li>将校验和字段置为0。</li><li>将每两个字节（16位）相加（二进制求和）直到最后得出结果，若出现最后还剩一个字节继续与前面结果相加。</li><li>(溢出)将高16位与低16位相加，直到高16位为0为止。</li><li>将最后的结果（二进制）取反。</li></ol><p>关于二进制求和：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 例:</span><br><span class="line"># 1. 不溢出时</span><br><span class="line"></span><br><span class="line">4500  - &gt; 0100010100000000</span><br><span class="line">003c  - &gt; 0000000000111100</span><br><span class="line"></span><br><span class="line">453C  - &gt; 0100010100111100  # 结果</span><br><span class="line"></span><br><span class="line"># 2. 溢出时 高16位与低16位相加</span><br><span class="line">E188  - &gt; 1110000110001000 </span><br><span class="line">AC10  - &gt; 1010110000010000</span><br><span class="line"></span><br><span class="line">18D98  - &gt; 11000110110011000</span><br><span class="line">8D99  - &gt; 1000110110011001   # 结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 最后结果取反</span><br><span class="line">0A0C  - &gt; 0000101000001100  # 最后一次累加</span><br><span class="line">4E19  - &gt; 0100111000011001  # 取反得最终结果</span><br></pre></td></tr></table></figure><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 检验和</span><br><span class="line">def chesksum(data):</span><br><span class="line">    n = len(data)</span><br><span class="line">    m = n % 2</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in range(0, n - m, 2):</span><br><span class="line">        # 传入data以每两个字节（十六进制）通过ord转十进制，第一字节在低位，第二个字节在高位</span><br><span class="line">        # ？？？？？为什么第二个字节在高位</span><br><span class="line">        sum += (data[i]) + ((data[i+1]) &lt;&lt; 8)</span><br><span class="line">        sum = (sum &gt;&gt; 16) + (sum &amp; 0xffff)</span><br><span class="line">    if m:</span><br><span class="line">        sum += (data[-1])</span><br><span class="line">        sum = (sum &gt;&gt; 16) + (sum &amp; 0xffff)</span><br><span class="line"></span><br><span class="line">    # 取反</span><br><span class="line">    answer = ~sum &amp; 0xffff</span><br><span class="line">    #  主机字节序转网络字节序列</span><br><span class="line">    answer = answer &gt;&gt; 8 | (answer &lt;&lt; 8 &amp; 0xff00)</span><br><span class="line">    return answer</span><br></pre></td></tr></table></figure><h6 id="小-大端序"><a href="#小-大端序" class="headerlink" title="小/大端序"></a>小/大端序</h6><p>不同CPU中，4字节整数1在内存空间的存储方式是不同的。若不考虑这些就收发数据会发生问题，因为保存顺序的不同意味着对接收数据的解析顺序也不同。</p><ul><li>大端序（Big Endian）：高位字节存放到低位地址（高位字节在前）。</li><li>小端序（Little Endian）：高位字节存放到高位地址（低位字节在前）。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">保存4字节 int 型数据 0x12345678</span><br></pre></td></tr></table></figure><p>大端序</p><p><img src="http://c.biancheng.net/cpp/uploads/allimg/151109/1-15110ZSA3309.jpg" alt="image"></p><p>小端序</p><p><img src="http://c.biancheng.net/cpp/uploads/allimg/151109/1-15110ZT059560.jpg" alt="image"></p><p>不同CPU保存和解析数据的方式不同（主流的Intel系列CPU为小端序），小端序系统和大端序系统通信时会发生数据解析错误。因此在发送数据前，要将数据转换为统一的格式——网络字节序（Network Byte Order）。网络字节序统一为大端序。</p><h4 id="ICMP实现"><a href="#ICMP实现" class="headerlink" title="ICMP实现"></a>ICMP实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"># encoding:utf-8</span><br><span class="line">import time</span><br><span class="line">import struct</span><br><span class="line">import socket</span><br><span class="line">import select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 检验和</span><br><span class="line">def chesksum(data):</span><br><span class="line">    n = len(data)</span><br><span class="line">    m = n % 2</span><br><span class="line">    sum = 0</span><br><span class="line">    for i in range(0, n - m, 2):</span><br><span class="line">        # 传入data以每两个字节（十六进制）通过ord转十进制，第一字节在低位，第二个字节在高位</span><br><span class="line">        sum += (data[i]) + ((data[i+1]) &lt;&lt; 8)</span><br><span class="line">        sum = (sum &gt;&gt; 16) + (sum &amp; 0xffff)</span><br><span class="line">    if m:</span><br><span class="line">        sum += (data[-1])</span><br><span class="line">        sum = (sum &gt;&gt; 16) + (sum &amp; 0xffff)</span><br><span class="line"></span><br><span class="line">    # 取反</span><br><span class="line">    answer = ~sum &amp; 0xffff</span><br><span class="line">    #  主机字节序转网络字节序列</span><br><span class="line">    answer = answer &gt;&gt; 8 | (answer &lt;&lt; 8 &amp; 0xff00)</span><br><span class="line">    return answer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def request_ping(data_type, data_code, data_checksum, data_ID, data_Sequence, payload_body):</span><br><span class="line">    #  把字节打包成二进制数据</span><br><span class="line">    imcp_packet = struct.pack(&apos;&gt;BBHHH32s&apos;, data_type, data_code, data_checksum, data_ID, data_Sequence, payload_body)</span><br><span class="line">    # 获取校验和</span><br><span class="line">    icmp_chesksum = chesksum(imcp_packet)</span><br><span class="line">    #  把校验和传入，再次打包</span><br><span class="line">    imcp_packet = struct.pack(&apos;&gt;BBHHH32s&apos;, data_type, data_code, icmp_chesksum, data_ID, data_Sequence, payload_body)</span><br><span class="line">    return imcp_packet</span><br><span class="line"></span><br><span class="line"># 初始化套接字，并发送</span><br><span class="line">def raw_socket(dst_addr,imcp_packet):</span><br><span class="line">    # 实例化一个socket对象，ipv4，原套接字(普通套接字无法处理ICMP等报文)，分配协议端口</span><br><span class="line">    rawsocket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.getprotobyname(&quot;icmp&quot;))</span><br><span class="line">    # 记录当前请求时间</span><br><span class="line">    send_request_ping_time = time.time()</span><br><span class="line">    # 发送数据到网络</span><br><span class="line">    rawsocket.sendto(imcp_packet, (dst_addr, 80))</span><br><span class="line">    return send_request_ping_time, rawsocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def reply_ping(send_request_ping_time, rawsocket, data_Sequence, timeout=2):</span><br><span class="line">    while True:</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        select函数，直到inputs中的套接字被触发（在此例中，套接字接收到客户端发来的握手信号，从而变得可读，满足select函数的“可读”条件），</span><br><span class="line">        返回被触发的套接字（服务器套接字）；                </span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        # 实例化select对象（非阻塞），可读，可写为空，异常为空，超时时间</span><br><span class="line">        what_ready = select.select([rawsocket], [], [], timeout)</span><br><span class="line">        # 等待时间</span><br><span class="line">        # wait_for_time = (time.time() - started_select)</span><br><span class="line">        wait_for_time = (time.time() - send_request_ping_time)</span><br><span class="line">        # 没有返回可读的内容，判断超时</span><br><span class="line">        if what_ready[0] == []:  # Timeout</span><br><span class="line">            return -1</span><br><span class="line">        # 记录接收时间</span><br><span class="line">        time_received = time.time()</span><br><span class="line">        # 设置接收的包的字节为1024</span><br><span class="line">        received_packet, addr = rawsocket.recvfrom(1024)</span><br><span class="line">        # 获取接收包的icmp头</span><br><span class="line">        # print(icmpHeader)</span><br><span class="line">        icmpHeader = received_packet[20:28]</span><br><span class="line">        # 反转编码</span><br><span class="line">        type, code, r_checksum, packet_id, sequence = struct.unpack(</span><br><span class="line">            &quot;&gt;BBHHH&quot;, icmpHeader</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        if type == 0 and sequence == data_Sequence:</span><br><span class="line">            return time_received - send_request_ping_time</span><br><span class="line"></span><br><span class="line">        # 数据包的超时时间判断</span><br><span class="line">        timeout = timeout - wait_for_time</span><br><span class="line">        if timeout &lt;= 0:</span><br><span class="line">            return -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dealtime(dst_addr, sumtime, shorttime, longtime, accept, i, time):</span><br><span class="line">    sumtime += time</span><br><span class="line">    print(sumtime)</span><br><span class="line">    if i == 4:</span><br><span class="line">        print(&quot;&#123;0&#125;的Ping统计信息：&quot;.format(dst_addr))</span><br><span class="line">        print(&quot;数据包：已发送=&#123;0&#125;,接收=&#123;1&#125;，丢失=&#123;2&#125;（&#123;3&#125;%丢失），\n往返行程的估计时间（以毫秒为单位）：\n\t最短=&#123;4&#125;ms，最长=&#123;5&#125;ms，平均=&#123;6&#125;ms&quot;.format(i+1,accept,i+1-accept,(i+1-accept)/(i+1)*100,shorttime,longtime,sumtime))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ping(host):</span><br><span class="line">    # 统计最终 已发送、 接受、 丢失</span><br><span class="line">    send, accept, lost = 0, 0, 0</span><br><span class="line">    sumtime, shorttime, longtime, avgtime = 0, 1000, 0, 0</span><br><span class="line">    # TODO icmp数据包的构建</span><br><span class="line">    # 8回射请求 11超时 0回射应答</span><br><span class="line">    data_type = 8</span><br><span class="line">    data_code = 0</span><br><span class="line">    # 检验和</span><br><span class="line">    data_checksum = 0</span><br><span class="line">    # ID</span><br><span class="line">    data_ID = 0</span><br><span class="line">    # 序号</span><br><span class="line">    data_Sequence = 1</span><br><span class="line">    # 可选的内容</span><br><span class="line">    payload_body = b&apos;abcdefghijklmnopqrstuvwabcdefghi&apos; #data</span><br><span class="line"></span><br><span class="line">    # 将主机名转ipv4地址格式，返回以ipv4地址格式的字符串，如果主机名称是ipv4地址，则它将保持不变</span><br><span class="line">    dst_addr = socket.gethostbyname(host)</span><br><span class="line">    print(&quot;正在 Ping &#123;0&#125; [&#123;1&#125;] 具有 32 字节的数据:&quot;.format(host, dst_addr))</span><br><span class="line">    # 默认发送4次</span><br><span class="line">    for i in range(0, 4):</span><br><span class="line">        send = i + 1</span><br><span class="line">        # 请求ping数据包的二进制转换</span><br><span class="line">        icmp_packet = request_ping(data_type, data_code, data_checksum, data_ID, data_Sequence + i, payload_body)</span><br><span class="line">        # 连接套接字,并将数据发送到套接字</span><br><span class="line">        send_request_ping_time, rawsocket = raw_socket(dst_addr, icmp_packet)</span><br><span class="line">        # 数据包传输时间</span><br><span class="line">        times = reply_ping(send_request_ping_time, rawsocket, data_Sequence + i)</span><br><span class="line">        if times &gt; 0:</span><br><span class="line">            print(&quot;来自 &#123;0&#125; 的回复: 字节=32 时间=&#123;1&#125;ms&quot;.format(dst_addr, int(times*1000)))</span><br><span class="line"></span><br><span class="line">            accept += 1</span><br><span class="line">            return_time = int(times * 1000)</span><br><span class="line">            sumtime += return_time</span><br><span class="line">            if return_time &gt; longtime:</span><br><span class="line">                longtime = return_time</span><br><span class="line">            if return_time &lt; shorttime:</span><br><span class="line">                shorttime = return_time</span><br><span class="line">            time.sleep(0.7)</span><br><span class="line">        else:</span><br><span class="line">            lost += 1</span><br><span class="line">            print(&quot;请求超时。&quot;)</span><br><span class="line"></span><br><span class="line">        if send == 4:</span><br><span class="line">            print(&quot;&#123;0&#125;的Ping统计信息:&quot;.format(dst_addr))</span><br><span class="line">            print(&quot;\t数据包：已发送=&#123;0&#125;,接收=&#123;1&#125;，丢失=&#123;2&#125;（&#123;3&#125;%丢失），\n往返行程的估计时间（以毫秒为单位）：\n\t最短=&#123;4&#125;ms，最长=&#123;5&#125;ms，平均=&#123;6&#125;ms&quot;.format(</span><br><span class="line">                i + 1, accept, i + 1 - accept, (i + 1 - accept) / (i + 1) * 100, shorttime, longtime, sumtime/send))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    i = input(&quot;请输入要ping的主机或域名\n&quot;)</span><br><span class="line">    ping(i)</span><br></pre></td></tr></table></figure><h5 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h5><h6 id="SOCK-RAW"><a href="#SOCK-RAW" class="headerlink" title="SOCK_RAW"></a>SOCK_RAW</h6><p>实际上，我们常用的网络编程都是在应用层的报文的收发操作，也就是大多数程序员接触到的流式套接字(SOCK_STREAM)和数据包式套接字(SOCK_DGRAM)。而这些数据包都是由系统提供的协议栈实现，用户只需要填充应用层报文即可，由系统完成底层报文头的填充并发送。</p><p>然而在某些情况下需要执行更底层的操作，比如修改报文头、避开系统协议栈等。这个时候就需要使用其他的方式来实现。</p><p>原始套接字(SOCK_RAW)是一种不同于SOCK_STREAM、SOCK_DGRAM的套接字，它实现于系统核心。首先来说，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。总体来说，SOCK_RAW可以处理普通的网络报文之外，还可以处理一些特殊协议报文以及操作IP层及其以上的数据。</p><h2 id="引用自："><a href="#引用自：" class="headerlink" title="引用自："></a>引用自：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/zhj082/article/details/80531628</span><br><span class="line"></span><br><span class="line">https://www.jianshu.com/p/17f16256008d</span><br><span class="line"></span><br><span class="line">《计算机网络》第七版</span><br><span class="line"></span><br><span class="line">https://blog.csdn.net/newnewman80/article/details/8000404</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PING&quot;&gt;&lt;a href=&quot;#PING&quot; class=&quot;headerlink&quot; title=&quot;PING&quot;&gt;&lt;/a&gt;PING&lt;/h1&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h
      
    
    </summary>
    
    
      <category term="python 网络编程" scheme="https://sssmeb.github.io/tags/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sssmeb.github.io/2019/07/07/hello-world/"/>
    <id>https://sssmeb.github.io/2019/07/07/hello-world/</id>
    <published>2019-07-07T09:41:28.918Z</published>
    <updated>2019-07-07T09:41:28.918Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
